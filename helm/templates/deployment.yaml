apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}
    spec:
      tolerations:
        - key: "CriticalAddonsOnly"
          operator: "Exists"
      nodeSelector:
        kubernetes.io/os: linux
      affinity:
         podAntiAffinity:
           requiredDuringSchedulingIgnoredDuringExecution:
           - labelSelector:
               matchExpressions:
               - key: app.kubernetes.io/name
                 operator: In
                 values: ["{{ .Release.Name }}"]
             topologyKey: kubernetes.io/hostname
      volumes:
        - name: "{{ .Release.Name }}-cfg"
          configMap:
            name: {{ .Release.Name }}
      containers:
        - name: {{ .Release.Name }}
          image: {{ .Values.image }}
          env:
            - name: HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: "{{ .Release.Name }}-cfg"
              readOnly: true
              subPath: config.json
              mountPath: /usr/src/app/config.json
          ports:
            - name: http
              protocol: TCP
              containerPort: 8080
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
          resources:
            requests:
              cpu: 100m
          securityContext:
            runAsUser: 100
